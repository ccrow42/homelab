---
# Source: px-central/templates/px-backup/pxcentral-backup.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: px-backup-account
  namespace: central
  labels:
    app.kubernetes.io/component: px-backup
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
---
# Source: px-central/templates/px-backup/pxcentral-mongodb.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pxc-backup-mongodb
  namespace: central
  labels:
    app.kubernetes.io/component: pxc-backup-mongodb
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
secrets:
  - name: pxc-backup-mongodb
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: px-keycloak-account
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  namespace: central
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-lighthouse.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pxcentral-lh-middleware
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-lh-middleware
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
---
# Source: px-central/templates/px-lighthouse/pxcentral-api-server.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pxcentral-apiserver
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-apiserver
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
---
# Source: px-central/templates/px-backup/pxcentral-mongodb.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: pxc-backup-mongodb
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  name: pxc-backup-mongodb
  namespace: central
type: Opaque
stringData:
  mongodb-root-password: "pxcentral"
  mongodb-password: "Password1"
  mongodb-replica-set-key: "pxbackup"
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  name: pxcentral-keycloak-postgresql
  namespace: central
type: Opaque
stringData:
  postgresql-username: "keycloak"
  postgresql-password: "keycloak"
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  name: pxcentral-keycloak-http
  namespace: central
type: Opaque
stringData:
  password: "admin"
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-oidc.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pxc-backup-secret
  namespace: central
  labels:
    app.kubernetes.io/component: px-backup
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
type: Opaque
stringData:
  OIDC_CLIENT_ID: "pxcentral"
  OIDC_ENDPOINT: "http://pxcentral-keycloak-http/auth/realms/master"
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: pxcentral-mysql
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  name: pxcentral-mysql-secret
  namespace: central
type: Opaque
stringData:
  DB_USERNAME: "root"
  DB_PASSWORD: "{{PXCDB_PASSWORD}}"
---
# Source: px-central/templates/px-backup/pxcentral-backup.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: call-home
  namespace: central
  labels:
    app: px-backup
    app.kubernetes.io/component: px-backup
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
data:
  enable: "true"
---
# Source: px-central/templates/px-backup/pxcentral-mongodb.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxc-backup-mongodb-scripts
  namespace: central
  labels:
    app.kubernetes.io/component: pxc-backup-mongodb
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
data:
  setup.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/mongodb-env.sh
    . /opt/bitnami/scripts/libfs.sh
    . /opt/bitnami/scripts/liblog.sh
    . /opt/bitnami/scripts/libvalidations.sh

    echo "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    echo "Advertised Service: $K8S_SERVICE_NAME"

    # Check for existing replica set in case there is no data in the PVC
    # This is for cases where the PVC is lost or for MongoDB caches without
    # persistence
    current_primary=""
    if is_dir_empty "${MONGODB_DATA_DIR}/db"; then
      echo "Data dir empty, checking if the replica set already exists"
      echo "mongoList: pxc-backup-mongodb-0.pxc-backup-mongodb-headless:27017,pxc-backup-mongodb-1.pxc-backup-mongodb-headless:27017,pxc-backup-mongodb-2.pxc-backup-mongodb-headless:27017"
      current_primary=$(mongosh admin --host "pxc-backup-mongodb-0.pxc-backup-mongodb-headless:27017,pxc-backup-mongodb-1.pxc-backup-mongodb-headless:27017,pxc-backup-mongodb-2.pxc-backup-mongodb-headless:27017" --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD --eval 'db.runCommand("ismaster")' | awk -F\' '/primary/ {print $2}')

      if ! is_empty_value "$current_primary"; then
        echo "Detected existing primary: ${current_primary}"
      fi
    fi

    if ! is_empty_value "$current_primary" && [[ "$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER" == "$current_primary" ]]; then
        echo "Advertised name matches current primary, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    elif ! is_empty_value "$current_primary" && [[ "$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER" != "$current_primary" ]]; then
        info "Current primary is different from this node. Configuring the node as replica of ${current_primary}"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_HOST="${current_primary%:*}"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="${current_primary#*:}"
        export MONGODB_SET_SECONDARY_OK="yes"
    elif [[ "$MY_POD_NAME" = "pxc-backup-mongodb-0" ]]; then
        echo "Pod name matches initial primary pod name, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    else
        echo "Pod name doesn't match initial primary pod name, configuring node as a secondary"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    fi

    if [[ "$MONGODB_REPLICA_SET_MODE" == "secondary" ]]; then
        export MONGODB_INITIAL_PRIMARY_ROOT_USER="$MONGODB_ROOT_USER"
        export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
        export MONGODB_ROOT_PASSWORD="" MONGODB_USERNAME="" MONGODB_DATABASE="" MONGODB_PASSWORD=""
    fi

    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxcentral-keycloak-sh
  namespace: central
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
data:
  keycloak.sh: |
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset

    exec /opt/keycloak/bin/kc.sh start --spi-login-protocol-openid-connect-legacy-logout-redirect-uri=true --spi-connections-jpa-default-migration-strategy=update
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxcentral-keycloak-startup
  namespace: central
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
data:
  keycloak.cli: |
    embed-server --std-out=echo
    batch
    ## Sets the node identifier to the node name (= pod name). Node identifiers have to be unique. They can have a
    ## maximum length of 23 characters. Thus, the chart's fullname template truncates its length accordingly.
    /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})
    
    
    # Allow log level to be configured via environment variable
    /subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    /subsystem=logging/root-logger=ROOT:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    
    # Add dedicated eventsListener config element to allow configuring elements.
    /subsystem=keycloak-server/spi=eventsListener:add()
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:add(enabled=true)
    
    # Propagate success events to INFO instead of DEBUG, to expose successful logins for log analysis
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.success-level,value=info)
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.error-level,value=warn)
    
    
    # Configure datasource to use explicit query timeout in seconds
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=query-timeout,value=${env.DB_QUERY_TIMEOUT:300})
    
    # Configure datasource to connection before use
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=validate-on-match,value=${env.DB_VALIDATE_ON_MATCH:true})
    
    # Configure datasource to try all other connections before failing
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=use-fast-fail,value=${env.DB_USE_CAST_FAIL:false})
    
    
    run-batch
    stop-embedded-server
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxcentral-ui-configmap
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-frontend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
data:
  APP_KEY: base64:J1RH3W4+CILq3/eac9zqYbAMzeptqCJgR9KcWRdhtHw=
  BASE_ROOT_PATH: /
  DB_PORT: "3306"
  DB_DATABASE: pxcentral
  FRONTEND_ENABLED_MODULES: COMPANY,LH,USERS,SSO
  PX_BACKUP_ENDPOINT: "px-backup:10002"
  PX_BACKUP_ORGID: "default"
  PX_STATUS_ENDPOINT: "http://pxcentral-apiserver:10006"
  OIDC_AUTHSERVERURL: http://pxcentral-keycloak-http:80/auth/realms/master
  OIDC_SCOPES: openid
  HIDE_KUBE_CONFIG: "False"
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxcentral-frontend-nginx-config
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-frontend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
data:
  default.conf: |
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    fastcgi_send_timeout 300s;
    fastcgi_read_timeout 300s;
    client_max_body_size 8M;

    upstream backend {
      server pxcentral-backend:80;
    }

    upstream lhBackend {
      server pxcentral-lh-middleware:8091;
    }

    upstream keycloak {
      server pxcentral-keycloak-http:80;
    }

    map $http_x_forwarded_proto $myscheme {
      default $http_x_forwarded_proto;
      ''  $scheme;
    }

    server {
      listen  8080;
      server_name localhost;
      server_tokens off;
      location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
      }

      location /backend/ {
        proxy_pass http://backend/;
        proxy_cache_bypass  $http_upgrade;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        "upgrade";
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $myscheme;
        proxy_set_header X-Forwarded-Host  $http_host;
        proxy_set_header Port  $http_port;
        proxy_set_header X-Forwarded-Port  $http_port;
      }
      location /lhBackend/ {
        proxy_pass http://lhBackend/;
      }
      location /auth/ {
        proxy_pass http://keycloak;
        proxy_cache_bypass  $http_upgrade;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        "upgrade";
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $myscheme;
        proxy_set_header X-Forwarded-Host  $http_host;
        proxy_set_header Port  $http_port;
        proxy_set_header X-Forwarded-Port  $http_port;
        proxy_buffer_size 8k;
      }
      error_page 404 =200 /index.html;
      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
        root   /usr/share/nginx/html;
      }
    }
---
# Source: px-central/templates/px-lighthouse/pxcentral-onprem.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxcentral-admin-user
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-frontend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
data:
  DEFAULT_USER_NAME: "admin"
  DEFAULT_USER_PASSWORD: "admin"
  DEFAULT_EMAIL: "admin@portworx.com"
  CENTRAL_OIDC_ENABLED: "true"
  CENTRAL_OIDC_CLIENT_ID: "pxcentral"
  EXTERNAL_OIDC_ENABLED: "false"
  EXTERNAL_OIDC_ENDPOINT: ""
  EXTERNAL_OIDC_CLIENT_ID: ""
  EXTERNAL_OIDC_CLIENT_SECRET: ""
---
# Source: px-central/templates/px-lighthouse/pxcentral-onprem.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxcentral-modules
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-backend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
data:
  ENABLED_LIGHTHOUSE: "true"
  ENABLED_BACKUP: "true"
  ENABLED_LICENSE_SERVER: "false"
  ENABLED_FORWARDING_PROXY: "false"
  ENABLED_METRICS: "false"
  MINI_K8S: "false"
  ENABLED_SSO: "true"
  ENABLEDE_CENTRAL_OIDC: "true"
  ENABLED_EXTERNAL_OIDC: "false"
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pxcentral-mysql-pvc
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-mysql
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: px-db
---
# Source: px-central/templates/px-backup/pxcentral-backup.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: px-backup-cluster-role
  namespace: central
  labels:
    app.kubernetes.io/component: px-backup
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "update", "get", "patch", "list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["create", "update", "get", "patch", "list", "delete"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["delete"]
---
# Source: px-central/templates/px-lighthouse/pxcentral-api-server.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "release-name"
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-apiserver
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
rules:
  - apiGroups: ["", "apps"]
    resources: ["nodes", "deployments"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "update", "get", "patch", "list", "watch"]
---
# Source: px-central/templates/px-backup/pxcentral-backup.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: px-backup-cluster-role-binding
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-apiserver
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
subjects:
  - kind: ServiceAccount
    name: px-backup-account
    namespace: central
roleRef:
  kind: ClusterRole
  name: px-backup-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: px-central/templates/px-lighthouse/pxcentral-api-server.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "release-name"
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-apiserver
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
subjects:
  - kind: ServiceAccount
    name: pxcentral-apiserver
    namespace: central
roleRef:
  kind: ClusterRole
  name: "release-name"
  apiGroup: rbac.authorization.k8s.io
---
# Source: px-central/templates/px-backup/pxcentral-backup.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: px-backup-role
  namespace: central
  labels:
    app.kubernetes.io/component: px-backup
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "delete", "update", "list"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "update", "create"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "create", "delete", "update"]
  - apiGroups: ["batch"]
    resources: ["cronjobs"]
    verbs: ["get", "create", "delete", "update"]
  - apiGroups: ["kdmp.portworx.com"]
    resources: ["backuplocationmaintenances"]
    verbs: ["get", "create", "delete", "update"]
  - apiGroups: ["kdmp.portworx.com"]
    resources: ["volumebackupdeletes"]
    verbs: ["get", "create", "delete", "update"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "create", "delete", "update", "list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list"]
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: px-keycloak-role
  namespace: central
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-lighthouse.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pxcentral-lh-middleware
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-lh-middleware
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
---
# Source: px-central/templates/px-lighthouse/pxcentral-api-server.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pxcentral-apiserver
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-apiserver
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
# Source: px-central/templates/px-backup/pxcentral-backup.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: px-backup-role-binding
  namespace: central
  labels:
    app.kubernetes.io/component: px-backup
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
subjects:
- kind: ServiceAccount
  name: px-backup-account
  namespace: central
roleRef:
  kind: Role
  name: px-backup-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: px-keycloak-role-binding
  namespace: central
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
subjects:
- kind: ServiceAccount
  name: px-keycloak-account
  namespace: central
roleRef:
  kind: Role
  name: px-keycloak-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-lighthouse.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pxcentral-lh-middleware
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-lh-middleware
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
subjects:
- kind: ServiceAccount
  name: pxcentral-lh-middleware
  namespace: central
roleRef:
  kind: Role
  name: pxcentral-lh-middleware
  apiGroup: rbac.authorization.k8s.io
---
# Source: px-central/templates/px-lighthouse/pxcentral-api-server.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pxcentral-apiserver
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-apiserver
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
subjects:
- kind: ServiceAccount
  name: pxcentral-apiserver
  namespace: central
roleRef:
  kind: Role
  name: pxcentral-apiserver
  apiGroup: rbac.authorization.k8s.io
---
# Source: px-central/templates/px-backup/pxcentral-backup.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: px-backup
    app.kubernetes.io/component: px-backup
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  name: px-backup
  namespace: central
spec:
  ports:
  - protocol: TCP
    port: 10002
    targetPort: 10002
    name: grpc
  - protocol: TCP
    port: 10001
    targetPort: 10001
    name: rest-api
  selector:
    app: px-backup
  type: ClusterIP
---
# Source: px-central/templates/px-backup/pxcentral-mongodb.yaml
apiVersion: v1
kind: Service
metadata:
  name: pxc-backup-mongodb-headless
  namespace: central
  labels:
    app.kubernetes.io/component: pxc-backup-mongodb
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/component: pxc-backup-mongodb
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-keycloak-postgresql-headless
  namespace: central
  labels:
    app.kubernetes.io/component: keycloak
    app: postgresql
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-keycloak-postgresql
  namespace: central
  labels:
    app: postgresql
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    role: master
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-keycloak-headless
  namespace: central
  labels:
    app.kubernetes.io/component: keycloak
    service: headless
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/component: keycloak
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-keycloak-http
  namespace: central
  labels:
    app.kubernetes.io/component: keycloak
    service: http
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/component: keycloak
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-lighthouse.yaml
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-lh-middleware
  namespace: central
  labels:
    run: pxcentral-lh-middleware
    app.kubernetes.io/component: pxcentral-lh-middleware
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    run: pxcentral-lh-middleware
  ports:
    - name: http
      port: 8091
      targetPort: 8091
      protocol: TCP
    - name: https
      port: 8092
      targetPort: 8092
      protocol: TCP
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: pxcentral-mysql
    run: pxcentral-mysql
    app.kubernetes.io/component: pxcentral-mysql
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  name: pxcentral-mysql
  namespace: central
spec:
  selector:
    run: pxcentral-mysql
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-frontend
  namespace: central
  labels:
    run: pxcentral-frontend
    app.kubernetes.io/component: pxcentral-frontend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    run: pxcentral-frontend
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-backend
  namespace: central
  labels:
    run: pxcentral-backend
    app.kubernetes.io/component: pxcentral-backend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    run: pxcentral-backend
  ports:
    - name: port
      port: 80
      targetPort: 8080
      protocol: TCP
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: px-central-ui
  namespace: central
  labels:
    run: pxcentral-frontend
    app.kubernetes.io/component: pxcentral-frontend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  annotations:
spec:
  type: LoadBalancer
  selector:
    run: pxcentral-frontend
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: px-backup-ui
  namespace: central
  labels:
    run: pxcentral-frontend
    app.kubernetes.io/component: pxcentral-frontend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  annotations:
spec:
  type: LoadBalancer
  selector:
    run: pxcentral-frontend
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
---
# Source: px-central/templates/px-lighthouse/pxcentral-api-server.yaml
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-apiserver
  namespace: central
  labels:
    app: pxcentral-apiserver
    app.kubernetes.io/component: pxcentral-apiserver
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    app: pxcentral-apiserver
  ports:
    - name: pxcentral-grpc
      protocol: TCP
      port: 10005
      targetPort: 10005
    - name: pxcentral-rest
      protocol: TCP
      port: 10006
      targetPort: 10006
---
# Source: px-central/templates/px-backup/pxcentral-backup.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: px-backup
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  name: px-backup
  namespace: central
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
     app: px-backup
  template:
    metadata:
      labels:
        app: px-backup
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
      containers:
      - env:
        - name: PX_BACKUP_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PX_BACKUP_DEFAULT_ORG
          value: default
        - name: PX_BACKUP_DEFAULT_DATASTORE
          value: mongodb
        - name: SOFT_LICENSING_PERIOD
          value: "30"
        - name: AIRGAP_REPORTING_PERIOD
          value: "90"
        image: docker.io/portworx/px-backup:2.5.0
        imagePullPolicy: Always
        name: px-backup
        ports:
        - containerPort: 10002
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /v1/health
            port: 10001
          initialDelaySeconds: 15
          timeoutSeconds: 1
          periodSeconds: 60
        livenessProbe:
          httpGet:
            path: /v1/health
            port: 10001
          initialDelaySeconds: 1800
          timeoutSeconds: 1
          periodSeconds: 60
        command:
        - /px-backup
        - start
        - --datastoreEndpoints=mongodb://pxbackup:Password1@pxc-backup-mongodb-0.pxc-backup-mongodb-headless:27017,pxc-backup-mongodb-1.pxc-backup-mongodb-headless:27017,pxc-backup-mongodb-2.pxc-backup-mongodb-headless:27017/?authSource=px-backup&replicaSet=rs0
        - --mongo-migration=complete
      serviceAccountName: px-backup-account
      imagePullSecrets:
        - name: "docregistry-secret"
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-lighthouse.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-lh-middleware
  namespace: central
  labels:
    run: pxcentral-lh-middleware
    app.kubernetes.io/component: pxcentral-lh-middleware
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    matchLabels:
      run: pxcentral-lh-middleware
      app.kubernetes.io/component: pxcentral-lh-middleware
  replicas: 1
  revisionHistoryLimit: 0
  minReadySeconds: 0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: pxcentral-lh-middleware
        app.kubernetes.io/component: pxcentral-lh-middleware
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
      containers:
      - name: pxcentral-lh-middleware
        image: docker.io/portworx/pxcentral-onprem-ui-lhbackend:2.5.0
        imagePullPolicy: Always
        env:
          - name: K8S_QPS
            value: "100"
          - name: K8S_BURST
            value: "100"
          - name: PX_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
          - name: http
            containerPort: 8091
          - name: https
            containerPort: 8092
        readinessProbe:
          httpGet:
            path: /ping
            port: 8091
          initialDelaySeconds: 15
          timeoutSeconds: 1
          periodSeconds: 60
        livenessProbe:
          httpGet:
            path: /ping
            port: 8091
          initialDelaySeconds: 15
          timeoutSeconds: 1
          periodSeconds: 60
      imagePullSecrets:
        - name: "docregistry-secret"
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      restartPolicy: Always
      serviceAccountName: pxcentral-lh-middleware
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-backend
  namespace: central
  labels:
    run: pxcentral-backend
    app.kubernetes.io/component: pxcentral-backend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    matchLabels:
      run: pxcentral-backend
      app.kubernetes.io/component: pxcentral-backend
  replicas: 1
  revisionHistoryLimit: 0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: pxcentral-backend
        app.kubernetes.io/component: pxcentral-backend
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
      initContainers:
        - name: init-mysql-db
          image: docker.io/portworx/pxcentral-onprem-ui-backend:2.5.0
          imagePullPolicy: Always
          command:
            - bash
            - -c
            - cd /var/www/html && ./install.sh
          env:
            - name: DB_INIT_TIMEOUT
              value: "300"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: DB_PASSWORD
                  name: pxcentral-mysql-secret
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: DB_USERNAME
                  name: pxcentral-mysql-secret
            - name: OIDC_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: pxc-backup-secret
                  key: OIDC_CLIENT_ID
            - name: OIDC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: pxc-backup-secret
                  key: OIDC_CLIENT_SECRET
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: credential
                  name: px-central-admin
          envFrom:
            - configMapRef:
                name: pxcentral-ui-configmap
      containers:
        - name: pxcentral-backend
          image: docker.io/portworx/pxcentral-onprem-ui-backend:2.5.0
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /ping
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /ping
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 60
          envFrom:
            - configMapRef:
                name: pxcentral-ui-configmap
          env:
            - name: ENABLE_NFS
              value: "true"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pxcentral-mysql-secret
                  key: DB_PASSWORD
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: pxcentral-mysql-secret
                  key: DB_USERNAME
            - name: OIDC_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: pxc-backup-secret
                  key: OIDC_CLIENT_ID
            - name: OIDC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: pxc-backup-secret
                  key: OIDC_CLIENT_SECRET
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: credential
                  name: px-central-admin
          resources: {}
      imagePullSecrets:
        - name: "docregistry-secret"
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      restartPolicy: Always 
status: {}
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-frontend
  namespace: central
  labels:
    run: pxcentral-frontend
    app.kubernetes.io/component: pxcentral-frontend
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    matchLabels:
      run: pxcentral-frontend
      app.kubernetes.io/component: pxcentral-frontend
  replicas: 1
  revisionHistoryLimit: 0
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: pxcentral-frontend
        app.kubernetes.io/component: pxcentral-frontend
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
      containers:
        - name: pxcentral-frontend
          image: docker.io/portworx/pxcentral-onprem-ui-frontend:2.5.0
          imagePullPolicy: Always
          ports:
            - name : http
              containerPort: 80
            - name: https
              containerPort: 443
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 60
          envFrom:
            - configMapRef:
                name: pxcentral-ui-configmap
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pxcentral-mysql-secret
                  key: DB_PASSWORD
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: pxcentral-mysql-secret
                  key: DB_USERNAME
            - name: OIDC_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: pxc-backup-secret
                  key: OIDC_CLIENT_ID
            - name: OIDC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: pxc-backup-secret
                  key: OIDC_CLIENT_SECRET
          volumeMounts:
            - name: frontend-nginx-configs
              mountPath: /etc/nginx/conf.d
          resources: {} 
      volumes:
        - name: frontend-nginx-configs
          configMap:
            name: pxcentral-frontend-nginx-config
      imagePullSecrets:
        - name: "docregistry-secret"
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      restartPolicy: Always
status: {}
---
# Source: px-central/templates/px-lighthouse/pxcentral-api-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-apiserver
  namespace: central
  labels:
    app.kubernetes.io/component: pxcentral-apiserver
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    matchLabels:
      app: pxcentral-apiserver
      app.kubernetes.io/component: pxcentral-apiserver
  replicas: 1
  revisionHistoryLimit: 0
  minReadySeconds: 0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: pxcentral-apiserver
        app.kubernetes.io/component: pxcentral-apiserver
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
      containers:
      - name: pxcentral-apiserver
        image: docker.io/portworx/pxcentral-onprem-api:2.5.0
        imagePullPolicy: Always
        env:
          - name: PXC_NAMESPACE
            value: central
        readinessProbe:
          httpGet:
            path: /v1/ping
            port: 10006
          initialDelaySeconds: 10
          timeoutSeconds: 120
          periodSeconds: 20
        ports:
          - name: pxcentral-grpc
            containerPort: 10005
          - name: pxcentral-rest
            containerPort: 10006
        command:
        - /pxcentral-onprem
        - start
      imagePullSecrets:
        - name: "docregistry-secret"
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: pxcentral-apiserver
      restartPolicy: Always
---
# Source: px-central/templates/px-backup/pxcentral-mongodb.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pxc-backup-mongodb
  namespace: central
  labels:
    app.kubernetes.io/component: pxc-backup-mongodb
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: release-name
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/component: pxc-backup-mongodb
  serviceName: pxc-backup-mongodb-headless
  podManagementPolicy: Parallel
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: release-name
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: pxc-backup-mongodb
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                    - pxc-backup-mongodb
                topologyKey: kubernetes.io/hostname
      imagePullSecrets:
        - name: "docregistry-secret"
      serviceAccountName: pxc-backup-mongodb
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: mongodb
          image: docker.io/portworx/mongodb:5.0.14-debian-11-r27
          imagePullPolicy: Always
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: pxc-backup-mongodb-headless
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: pxc-backup-mongodb-0.$(K8S_SERVICE_NAME)
            - name: MONGODB_REPLICA_SET_NAME
              value: rs0
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: $(MY_POD_NAME).$(K8S_SERVICE_NAME)
            - name: SHARED_FILE
              value: "/shared/info.txt"
            - name: MONGODB_USERNAME
              value: pxbackup
            - name: MONGODB_DATABASE
              value: px-backup
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-password
                  name: pxc-backup-mongodb
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-root-password
                  name: pxc-backup-mongodb
            - name: MONGODB_REPLICA_SET_KEY
              valueFrom:
                secretKeyRef:
                  key: mongodb-replica-set-key
                  name: pxc-backup-mongodb
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
            - name: MONGODB_EXTRA_FLAGS
              value: --wiredTigerCacheSizeGB=4
          ports:
            - containerPort: 27017
              name: mongodb
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.adminCommand("ping") && db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
            failureThreshold: 6
            initialDelaySeconds: 600
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /bitnami/mongodb
              name: pxc-mongodb-data
            - mountPath: /scripts/setup.sh
              name: scripts
              subPath: setup.sh
      volumes:
        - name: scripts
          configMap:
            defaultMode: 493
            name: pxc-backup-mongodb-scripts
  volumeClaimTemplates:
    - metadata:
        name: pxc-mongodb-data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: 64Gi
        storageClassName: px-db
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pxcentral-keycloak-postgresql
  namespace: central
  labels:
    app: postgresql
    role: master
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  serviceName: pxcentral-keycloak-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      role: master
      app.kubernetes.io/component: keycloak
      app.kubernetes.io/name: release-name
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      name: pxcentral-keycloak-postgresql
      labels:
        app: postgresql
        role: master
        app.kubernetes.io/component: keycloak
        app.kubernetes.io/name: release-name
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
      serviceAccountName: px-keycloak-account
      imagePullSecrets:
        - name: "docregistry-secret"
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: pxcentral-keycloak-postgresql
          image: docker.io/portworx/postgresql:11.19.0-debian-11-r1
          imagePullPolicy: Always
          
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: pxcentral-keycloak-postgresql
                  key: postgresql-username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pxcentral-keycloak-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "keycloak"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "keycloak" -d "keycloak" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "keycloak" -d "keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: pxcentral-keycloak-data
              mountPath: /bitnami/postgresql 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: pxcentral-keycloak-data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: 10Gi
        storageClassName: px-db
---
# Source: px-central/templates/px-lighthouse/px-central-oidc/pxcentral-keycloak.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pxcentral-keycloak
  namespace: central
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: keycloak
      app.kubernetes.io/name: release-name
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/managed-by: Helm
  replicas: 1
  serviceName: pxcentral-keycloak-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: keycloak
        app.kubernetes.io/name: release-name
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
      restartPolicy: Always
      serviceAccountName: px-keycloak-account
      imagePullSecrets:
        - name: "docregistry-secret"
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
        - name: wait-for-postgresql
          image: "docker.io/portworx/busybox:1.31"
          imagePullPolicy: Always
          command:
            - sh
            - -c
            - |
              until printf "." && nc -z -w 2 pxcentral-keycloak-postgresql 5432; do
                  sleep 2;
              done;

              echo 'PostgreSQL OK ✓'
          resources:
            {}
        - name: px-keycloak-login-theme
          image: docker.io/portworx/keycloak-login-theme:2.2.0
          imagePullPolicy: Always
          command:
            - sh
          args:
            - -c
            - |
              echo "Copying portworx theme..."
              cp -R /portworx/* /theme
          volumeMounts:
          - name: theme
            mountPath: /theme
      containers:
        - name: keycloak
          image: docker.io/portworx/keycloak:21.1.1
          imagePullPolicy: Always
          command:
            - /scripts/keycloak.sh
          env:
          - name: KC_HOSTNAME_STRICT
            value: "false"
          - name: KC_HOSTNAME_STRICT_HTTPS
            value: "false"
          - name: PROXY_ADDRESS_FORWARDING
            value: "true"
          - name: KEYCLOAK_ADMIN
            value: admin
          - name: KEYCLOAK_ADMIN_PASSWORD
            value: admin
          - name: KC_HTTP_RELATIVE_PATH
            value: /auth
          - name: KC_DB
            value: postgres
          - name: KC_DB_URL_HOST
            value: pxcentral-keycloak-postgresql
          - name: KC_DB_URL_PORT
            value: "5432"
          - name: KC_DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: pxcentral-keycloak-postgresql
                key: postgresql-username
          - name: KC_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-password
                name: pxcentral-keycloak-postgresql
          - name: KC_PROXY
            value: edge
          volumeMounts:
            - name: sh
              mountPath: /scripts
              readOnly: true
            - name: secrets
              mountPath: /secrets
              readOnly: true
            - name: startup
              mountPath: /opt/startup-scripts
              readOnly: true
            - name: theme
              mountPath: /opt/keycloak/themes/portworx/
            - name: keycloakdir
              mountPath: /.keycloak
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /auth/
              port: http
            initialDelaySeconds: 300
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /auth/realms/master
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1      
          resources:
            {}
      terminationGracePeriodSeconds: 60 
      volumes:
        - name: sh
          configMap:
            name: pxcentral-keycloak-sh
            defaultMode: 0555
        - name: secrets
          secret:
            secretName: pxcentral-keycloak-http
        - name: startup
          configMap:
            name: pxcentral-keycloak-startup
            defaultMode: 0555
        - emptyDir: {}
          name: keycloakdir
  volumeClaimTemplates:
    - metadata:
        name: theme
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: 5Gi
        storageClassName: px-db
---
# Source: px-central/templates/px-lighthouse/px-central-ui/pxcentral-ui.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    run: pxcentral-mysql
    app.kubernetes.io/component: pxcentral-mysql
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
  name: pxcentral-mysql
  namespace: central
spec:
  selector:
    matchLabels:
      run: pxcentral-mysql
      app.kubernetes.io/component: pxcentral-mysql
  replicas: 1
  serviceName: pxcentral-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: pxcentral-mysql
        app.kubernetes.io/component: pxcentral-mysql
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
      imagePullSecrets:
        - name: "docregistry-secret"
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: mysql
          image: docker.io/portworx/mysql:5.7.41
          imagePullPolicy: Always
          args:
            - "--ignore-db-dir=lost+found"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: pxcentral-ui-configmap
                  key: DB_DATABASE
            - name: MYSQL_ROOT_USER_NAME
              valueFrom:
                secretKeyRef:
                  name: pxcentral-mysql-secret
                  key: DB_USERNAME
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pxcentral-mysql-secret
                  key: DB_PASSWORD
            - name: SERVICE_NAME
              value: pxcentral-mysql
            - name: SERVICE_TAGS
              value: dev
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  echo $MYSQL_ROOT_PASSWORD > /etc/mysql/secret
                  export MYSQL_ROOT_PASSWORD_FILE=/etc/mysql/secret
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]; then
                      password_aux=$(cat $MYSQL_ROOT_PASSWORD_FILE)
                  fi
                  mysqladmin status -uroot -p$password_aux
            initialDelaySeconds: 600
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  echo $MYSQL_ROOT_PASSWORD > /etc/mysql/secret
                  export MYSQL_ROOT_PASSWORD_FILE=/etc/mysql/secret
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]; then
                      password_aux=$(cat $MYSQL_ROOT_PASSWORD_FILE)
                  fi
                  mysqladmin status -uroot -p$password_aux
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: pxcentral-mysql 
      volumes:
        - name: pxcentral-mysql
          persistentVolumeClaim:
            claimName: pxcentral-mysql-pvc
---
# Source: px-central/templates/px-lighthouse/pxcentral-post-install-hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: pxcentral-post-install-hook
  namespace: central
  annotations:
    meta.helm.sh/release-name: release-name
    meta.helm.sh/release-namespace: central
  labels:
    name: pxcentral-post-install-hook
    app.kubernetes.io/component: pxcentral-post-install-hook
    app.kubernetes.io/name: px-central
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "px-central-2.5.0"
    app.kubernetes.io/version: "2.5.0"
spec:
  template:
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
      serviceAccountName: pxcentral-apiserver
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: pxcentral-post-setup
        image: docker.io/portworx/pxcentral-onprem-post-setup:2.5.0
        imagePullPolicy: Always
        env:
          - name: LOG_LEVEL
            value: INFO
          - name: UPDATE_ADMIN_USER_PROFILE
            value: "true"
          - name: K8S_SSL_ENABLED
            value: "true"
          - name: PXC_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: DEPLOYMENT_TYPE
            value: "install"
        command: ["python", "-u", "/pxcentral-post-install/pxc-post-setup.py"]
      imagePullSecrets:
        - name: "docregistry-secret"
      restartPolicy: Never 
  backoffLimit: 5
  activeDeadlineSeconds: 2400
