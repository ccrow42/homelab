apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.0.1.41","10.0.1.44","10.0.1.45","10.0.1.46"],"port":443,"protocol":"HTTPS","serviceName":"plex:jackett-service","ingressName":"plex:ingress-jackett","hostname":"jackett.lab.local","path":"/","allNodes":false}]'
    labels:
      app: jackett
    name: jackett-deployment
    namespace: plexstack
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: jackett
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: jackett
      spec:
        containers:
        - env:
          - name: PUID
            value: "999"
          - name: PGID
            value: "999"
          image: ghcr.io/linuxserver/jackett
          imagePullPolicy: Always
          name: jackett
          ports:
          - containerPort: 9117
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config
            name: jackett-config
          - mountPath: /downloads
            name: jackett-downloads
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: stork
        terminationGracePeriodSeconds: 30
        volumes:
        - name: jackett-config
          persistentVolumeClaim:
            claimName: jackett-pvc
        - hostPath:
            path: /mnt/uberplex/downloads
            type: ""
          name: jackett-downloads
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.0.1.41","10.0.1.44","10.0.1.45","10.0.1.46"],"port":443,"protocol":"HTTPS","serviceName":"plex:ombi-service","ingressName":"plex:ingress-ombi","hostname":"ombi.ccrow.org","path":"/","allNodes":false}]'
    labels:
      app: ombi
    name: ombi-deployment
    namespace: plexstack
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ombi
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ombi
      spec:
        containers:
        - env:
          - name: PUID
            value: "999"
          - name: PGID
            value: "999"
          image: ghcr.io/linuxserver/ombi
          imagePullPolicy: Always
          name: ombi
          ports:
          - containerPort: 3579
            protocol: TCP
          resources:
            requests:
              cpu: "1"
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config
            name: ombi-config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: stork
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ombi-config
          persistentVolumeClaim:
            claimName: ombi-pvc
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.0.1.41","10.0.1.44","10.0.1.45","10.0.1.46"],"port":443,"protocol":"HTTPS","serviceName":"plex:qbittorrent-service","ingressName":"plex:ingress-qbittorrent","hostname":"qbittorrent.lab.local","path":"/","allNodes":false}]'
    labels:
      app: qbittorrent
    name: qbittorrent-deployment
    namespace: plexstack
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: qbittorrent
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: qbittorrent
      spec:
        containers:
        - env:
          - name: PUID
            value: "999"
          - name: PGID
            value: "999"
          - name: WEBUI_PORT
            value: "8080"
          image: ghcr.io/linuxserver/qbittorrent
          imagePullPolicy: Always
          name: qbittorrent
          ports:
          - containerPort: 8080
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config
            name: qbittorrent-config
          - mountPath: /downloads
            name: qbittorrent-downloads
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: stork
        terminationGracePeriodSeconds: 30
        volumes:
        - name: qbittorrent-config
          persistentVolumeClaim:
            claimName: qbittorrent-pvc
        - name: qbittorrent-downloads
          persistentVolumeClaim:
            claimName: downloads-data
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.0.1.41","10.0.1.44","10.0.1.45","10.0.1.46"],"port":443,"protocol":"HTTPS","serviceName":"plex:qbittorrent-service","ingressName":"plex:ingress-qbittorrent","hostname":"qbittorrent.lab.local","path":"/","allNodes":false}]'
    labels:
      app: qbittorrent-rss
    name: qbittorrent-deployment-rss
    namespace: plexstack
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: qbittorrent-rss
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: qbittorrent-rss
      spec:
        containers:
        - env:
          - name: PUID
            value: "999"
          - name: PGID
            value: "999"
          - name: WEBUI_PORT
            value: "8080"
          image: ghcr.io/linuxserver/qbittorrent
          imagePullPolicy: Always
          name: qbittorrent
          ports:
          - containerPort: 8080
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config
            name: qbittorrent-config
          - mountPath: /downloads
            name: qbittorrent-downloads
          - mountPath: "/archive"
            name: qbittorrent-archive
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: stork
        terminationGracePeriodSeconds: 30
        volumes:
        - name: qbittorrent-config
          persistentVolumeClaim:
            claimName: qbittorrent-rss-pvc
        - name: qbittorrent-downloads
          persistentVolumeClaim:
            claimName: downloads-data
        - name: qbittorrent-archive
          persistentVolumeClaim:
            claimName: archive-data
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.0.1.41","10.0.1.44","10.0.1.45","10.0.1.46"],"port":443,"protocol":"HTTPS","serviceName":"plex:radarr-service","ingressName":"plex:ingress-radarr","hostname":"radarr.lab.local","path":"/","allNodes":false}]'
    labels:
      app: radarr
    name: radarr-deployment
    namespace: plexstack
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: radarr
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: radarr
      spec:
        containers:
        - env:
          - name: PUID
            value: "999"
          - name: PGID
            value: "999"
          image: ghcr.io/linuxserver/radarr:latest
          imagePullPolicy: Always
          name: radarr
          ports:
          - containerPort: 7878
            protocol: TCP
          resources:
            requests:
              cpu: "1"
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config
            name: radarr-config
          - mountPath: /downloads
            name: radarr-downloads
          - mountPath: /movies
            name: radarr-movies
          - mountPath: "/archive"
            name: radarr-archive
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: stork
        terminationGracePeriodSeconds: 30
        volumes:
        - name: radarr-config
          persistentVolumeClaim:
            claimName: radarr-pvc
        - name: radarr-downloads
          persistentVolumeClaim:
            claimName: downloads-data
        - name: radarr-movies
          persistentVolumeClaim:
            claimName: movies-data
        - name: radarr-archive
          persistentVolumeClaim:
            claimName: archive-data
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: "null"
    labels:
      app: smtp
    name: smtp-deployment
    namespace: plexstack
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: smtp
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: smtp
      spec:
        containers:
        - env:
          - name: SMTP_HOSTNAME
            value: mail.ccrow.org
          - name: RELAY_NETWORKS
            value: 10.0.0.0/8
          image: pure/smtp-relay
          imagePullPolicy: Always
          name: smtp
          ports:
          - containerPort: 25
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.0.1.41","10.0.1.44","10.0.1.45","10.0.1.46"],"port":443,"protocol":"HTTPS","serviceName":"plex:sonarr-service","ingressName":"plex:ingress-sonarr","hostname":"sonarr.lab.local","path":"/","allNodes":false}]'
    labels:
      app: sonarr
    name: sonarr-deployment
    namespace: plexstack
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: sonarr
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: sonarr
      spec:
        containers:
        - env:
          - name: PUID
            value: "999"
          - name: PGID
            value: "999"
          image: ghcr.io/linuxserver/sonarr:latest
          imagePullPolicy: IfNotPresent
          name: sonarr
          ports:
          - containerPort: 8989
            protocol: TCP
          resources:
            requests:
              cpu: "1"
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config
            name: sonarr-config
          - mountPath: /tv
            name: sonarr-tv
          - mountPath: /downloads
            name: sonarr-downloads
          - mountPath: "/archive"
            name: sonarr-archive
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: stork
        terminationGracePeriodSeconds: 30
        volumes:
        - name: sonarr-config
          persistentVolumeClaim:
            claimName: sonarr-pvc
        - name: sonarr-tv
          persistentVolumeClaim:
            claimName: tv-data
        - name: sonarr-downloads
          persistentVolumeClaim:
            claimName: downloads-data
        - name: sonarr-archive
          persistentVolumeClaim:
            claimName: archive-data
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.0.1.41","10.0.1.44","10.0.1.45","10.0.1.46"],"port":443,"protocol":"HTTPS","serviceName":"plex:tautulli-service","ingressName":"plex:ingress-tautulli","hostname":"tautulli.ccrow.org","path":"/","allNodes":false}]'
    labels:
      app: tautulli
    name: tautulli-deployment
    namespace: plexstack
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: tautulli
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: tautulli
      spec:
        containers:
        - env:
          - name: PUID
            value: "999"
          - name: PGID
            value: "999"
          - name: TZ
            value: America/Los_Angeles
          image: ghcr.io/linuxserver/tautulli
          imagePullPolicy: Always
          name: tautulli
          ports:
          - containerPort: 8181
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config
            name: tautulli-config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: stork
        terminationGracePeriodSeconds: 30
        volumes:
        - name: tautulli-config
          persistentVolumeClaim:
            claimName: tautulli-pvc
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: lidarr-deployment
    labels:
      app: lidarr
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: lidarr
    template:
      metadata:
        labels:
          app: lidarr
      spec:
        containers:
          - name: lidarr
            image: ghcr.io/linuxserver/lidarr
            env:
              - name: PUID
                value: "999"
              - name: PGID
                value: "999"
            ports:
              - containerPort: 8686
            volumeMounts:
              - mountPath: /config
                name: lidarr-config
              - mountPath: /downloads
                name: lidarr-downloads
              - mountPath: /music
                name: lidarr-music
        volumes:
        - name: lidarr-config
          persistentVolumeClaim:
            claimName: lidarr-pvc
        - name: lidarr-downloads
          persistentVolumeClaim:
            claimName: downloads-data
        - name: lidarr-music
          persistentVolumeClaim:
            claimName: music-data
kind: List
metadata:
  resourceVersion: ""
