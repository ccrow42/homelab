apiVersion: v1
kind: Namespace
metadata:
  name: linkwarden
---
apiVersion: batch/v1
kind: Job
metadata:
  name: linkwarden-generate-secrets
  namespace: linkwarden
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: secret-gen
          image: bitnami/kubectl:latest
          command:
            - /bin/sh
            - -c
            - |
              POSTGRES_PASSWORD=$(head -c 16 /dev/urandom | base64)
              MEILI_MASTER_KEY=$(head -c 16 /dev/urandom | base64)

              kubectl create secret generic linkwarden-env \
                --namespace=linkwarden \
                --from-literal=POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
                --from-literal=MEILI_MASTER_KEY=$MEILI_MASTER_KEY
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgdata
  namespace: linkwarden
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: meili-data
  namespace: linkwarden
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: linkwarden-data
  namespace: linkwarden
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: linkwarden
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:16-alpine
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: linkwarden-env
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: pgdata
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meilisearch
  namespace: linkwarden
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meilisearch
  template:
    metadata:
      labels:
        app: meilisearch
    spec:
      containers:
        - name: meilisearch
          image: getmeili/meilisearch:v1.12.8
          env:
            - name: MEILI_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: linkwarden-env
                  key: MEILI_MASTER_KEY
          volumeMounts:
            - name: meili-storage
              mountPath: /meili_data
      volumes:
        - name: meili-storage
          persistentVolumeClaim:
            claimName: meili-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: linkwarden
  namespace: linkwarden
spec:
  replicas: 1
  selector:
    matchLabels:
      app: linkwarden
  template:
    metadata:
      labels:
        app: linkwarden
    spec:
      containers:
        - name: linkwarden
          image: ghcr.io/linkwarden/linkwarden:latest
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: linkwarden-env
                  key: POSTGRES_PASSWORD
            - name: MEILI_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: linkwarden-env
                  key: MEILI_MASTER_KEY
            - name: DATABASE_URL
              value: postgres://postgres:$(POSTGRES_PASSWORD)@postgres:5432/postgres
          volumeMounts:
            - name: linkwarden-storage
              mountPath: /data/data
          ports:
            - containerPort: 3000
      volumes:
        - name: linkwarden-storage
          persistentVolumeClaim:
            claimName: linkwarden-data
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: linkwarden
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: meilisearch
  namespace: linkwarden
spec:
  ports:
    - port: 7700
  selector:
    app: meilisearch
---
apiVersion: v1
kind: Service
metadata:
  name: linkwarden
  namespace: linkwarden
spec:
  ports:
    - port: 80
      targetPort: 3000
  selector:
    app: linkwarden
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: linkwarden
  namespace: linkwarden
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod-dns01
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - hosts:
        - linkwarden.ccrow.org
      secretName: linkwarden-tls
  rules:
    - host: linkwarden.ccrow.org
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: linkwarden
                port:
                  number: 80
